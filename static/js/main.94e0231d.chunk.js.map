{"version":3,"sources":["data/generateBoard.js","data/calculateNewBoard.js","data/initial.js","data/reducers/resetBoard.js","data/reducers/updateDifficulty.js","data/actions/state-actions.js","containers/BoardContainer.js","components/Board.js","components/ColourButton.js","containers/ControlsContainer.js","components/Controls.js","containers/ResetButtonContainer.js","components/ResetButton.js","containers/DifficultyContainer.js","components/Difficulty.js","containers/ScoreContainer.js","components/Score.js","containers/PipeContainer.js","components/Pipe.js","App.js","data/reducer.js","data/reducers/undo.js","data/reducers/changeColour.js","serviceWorker.js","index.js"],"names":["generateBoard","x","y","diff","result","i","row","j","push","Math","floor","random","calculateNewBoard","board","newColour","prevBoard","explore","map","yCoord","square","xCoord","filter","coords","length","reduce","acc","value","newBoard","JSON","stringify","initial","difficulty","height","width","colour","moves","history","bestScore","4","Infinity","5","6","state","Object","objectSpread","action","changeColour","type","connect","_ref","playerColour","dispatch","handleColourChange","incrementMoves","react_default","a","createElement","className","index","key","onClick","concat","ColourButton","handleClick","Array","fill","resetBoard","undo","Fragment","handleDifficulty","updateDifficulty","disabled","best","ResetButtonContainer","DifficultyContainer","style","left","store","createStore","toConsumableArray","pop","slice","defineProperty","every","window","__REDUX_DEVTOOLS_EXTENSION__","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","es","PipeContainer","BoardContainer","ControlsContainer","ScoreContainer","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.94e0231d.chunk.js","sourcesContent":["export default (x, y, diff) => {\n  if (!diff) { return [] }\n  let result = [];\n  for (let i = y; i--;) {\n    let row = [];\n    for (let j = x; j--;) {\n      row.push(Math.floor(Math.random() * diff));\n    }\n    result.push(row);\n  }\n  // make sure top left always starts on the first colour\n  result[0][0] = 'X';\n  return result;\n}\n","export default (board, newColour) => {\n  let prevBoard = board;\n\n  const explore = board => (\n\n    board.map((row, yCoord) => (\n\n      row.map((square, xCoord) => (\n\n        // checks around the current square\n        [\n          { x: xCoord, y: yCoord - 1 }, // top\n          { x: xCoord + 1, y: yCoord }, // right\n          { x: xCoord, y: yCoord + 1 }, // bottom\n          { x: xCoord - 1, y: yCoord }, // left\n        ]\n\n        // make sure neighbours are in bounds\n        .filter(coords => (\n          coords.x >= 0 &&\n          coords.y >= 0 &&\n          coords.x < board.length &&\n          coords.y < row.length\n        ))\n\n        // get contents of neighbour\n        .map(coords => (\n          board[coords.y][coords.x]\n        ))\n\n        // check if neighbour is X and current square is\n        // new colour and change square to X if so\n        .reduce((acc, value) => (\n          value === 'X' && acc === newColour ? 'X' : acc\n        ), square)\n\n      ))\n\n    ))\n\n  )\n\n  let newBoard = explore(prevBoard);\n\n  // function only adds nearest neighbours, but may have to\n  // reach further. Keep checking until the new board is the\n  // same as the previous one.\n  while (JSON.stringify(newBoard) !== JSON.stringify(prevBoard)) {\n    prevBoard = newBoard;\n    newBoard = explore(prevBoard);\n  }\n\n  return newBoard;\n\n}\n","import generateBoard from './generateBoard';\nimport calculateNewBoard from './calculateNewBoard';\n\nconst initial = {\n  difficulty: 4,\n  height: 10,\n  width: 10,\n  colour: 0,\n  moves: 0,\n  history: [],\n  bestScore: {\n    4: Infinity,\n    5: Infinity,\n    6: Infinity,\n  },\n};\n\n// pipe generateBoard through calculateNewBoard\n// to fill in X's where colours just happend to\n// be adjacent from start.\ninitial.board = calculateNewBoard(\n  generateBoard(\n    initial.height,\n    initial.width,\n    initial.difficulty\n  ), initial.colour\n);\n\nexport default initial;\n","import generateBoard from '../generateBoard';\nimport calculateNewBoard from '../calculateNewBoard';\nimport initial from '../initial';\n\nconst state = state => ({\n  ...initial,\n  board: calculateNewBoard(\n    generateBoard(\n      state.height,\n      state.width,\n      state.difficulty\n    ), 0 // always start with colour 0 as first square\n  ),\n  bestScore: state.bestScore,\n  colour: 0,\n  difficulty: state.difficulty\n})\n\nexport default state;\n","import generateBoard from '../generateBoard';\nimport calculateNewBoard from '../calculateNewBoard';\nimport initial from '../initial';\n\nconst state = (state, action) => ({\n  ...initial,\n  difficulty: action.difficulty,\n  board: calculateNewBoard(\n    generateBoard(\n      state.height,\n      state.width,\n      action.difficulty\n    ), 0 // always start with colour 0 as first square\n  ),\n  bestScore: state.bestScore,\n  colour: 0\n})\n\nexport default state;\n","export const changeColour = colour => ({\n  type: 'changeColour',\n  colour: colour,\n});\n\nexport const incrementMoves = () => ({\n  type: 'incrementMoves',\n});\n\nexport const resetBoard = () => ({\n  type: 'resetBoard',\n});\n\nexport const updateDifficulty = difficulty => ({\n  type: 'updateDifficulty',\n  difficulty: difficulty,\n});\n\nexport const undo = () => ({\n  type: 'undo',\n})\n","import { connect } from 'react-redux';\nimport Board from '../components/Board';\nimport { changeColour, incrementMoves } from '../data/actions/state-actions';\n\nconst mapState = ({ board, colour }) => ({\n  board,\n  playerColour: colour,\n});\n\nconst mapDispatch = dispatch => ({\n  handleColourChange: colour => dispatch(changeColour(colour)),\n  incrementMoves: colour => dispatch(incrementMoves()),\n})\n\nexport default connect(mapState, mapDispatch)(Board);\n","import React from 'react';\n\nexport default ({ board, playerColour, handleColourChange, incrementMoves }) => (\n  <div className='board'>\n    {\n      board.map((row, index) => (\n\n        <div\n          key={index}\n          className='row'\n        >\n\n          {\n            row.map((square, index) => (\n              <div\n                key={index}\n                onClick={ () => {\n                  handleColourChange(square === 'X' ? playerColour : square)\n                  if (playerColour !== square && square !== 'X') {\n                    incrementMoves()\n                  }\n                }}\n                // set controlled squares (represented by an X in state)\n                // to be the colour that the user has selected.\n                className={`square colour${ typeof square === 'number' ? square : playerColour }`}\n              />\n            ))\n          }\n\n        </div>\n\n      ))\n    }\n  </div>\n)\n\n","import React from 'react';\n\n\nexport default ({ handleClick, colour }) => (\n  <button\n    onClick={ handleClick }\n    className={`button colour${colour}`}\n  >\n  </button>\n)\n","import { connect } from 'react-redux';\nimport Controls from '../components/Controls';\nimport { changeColour, incrementMoves } from '../data/actions/state-actions';\n\nconst mapState = ({ difficulty, colour }) => ({\n  difficulty,\n  playerColour: colour\n});\n\nconst mapDispatch = dispatch => ({\n  handleColourChange: colour => dispatch(changeColour(colour)),\n  incrementMoves: colour => dispatch(incrementMoves()),\n});\n\nexport default connect(mapState, mapDispatch)(Controls);\n","import React from 'react';\nimport ColourButton from './ColourButton';\n\nexport default ({ difficulty, handleColourChange }) => (\n  <div className='controls-container'>\n    {\n      Array(difficulty)\n      .fill('')\n      .map((colour, index) => (\n        <ColourButton\n          key={ index }\n          handleClick={ () => handleColourChange(index) }\n          colour={ index }\n        />\n      ))\n    }\n  </div>\n)\n","import { connect } from 'react-redux';\nimport ResetButton from '../components/ResetButton';\nimport { resetBoard, undo } from '../data/actions/state-actions';\n\nconst mapDispatch = dispatch => ({\n  resetBoard: () => dispatch(resetBoard()),\n  undo: () => dispatch(undo()),\n})\n\nexport default connect(null, mapDispatch)(ResetButton);\n","import React from 'react';\n\nexport default ({ resetBoard, undo }) => (\n  <React.Fragment>\n    <button onClick={ resetBoard } className='reset'>Reset</button>\n    <button onClick={ undo } className='undo'>Undo</button>\n  </React.Fragment>\n)\n","import { connect } from 'react-redux';\nimport Difficulty from '../components/Difficulty';\nimport { updateDifficulty } from '../data/actions/state-actions';\n\nconst mapState = ({ difficulty, colour }) => ({ difficulty, colour });\n\nconst mapDispatch = dispatch => ({\n  handleDifficulty: difficulty => dispatch(updateDifficulty(difficulty)),\n});\n\nexport default connect(mapState, mapDispatch)(Difficulty);\n","import React from 'react';\n\nexport default ({ handleDifficulty, difficulty }) => (\n  <div className='difficulty'>\n    <h1>Colours:</h1>\n\n    <button\n      onClick={ () => handleDifficulty(4) }\n      disabled={ difficulty === 4 && 'disabled'}\n    >\n      4\n    </button>\n\n    <button\n      onClick={ () => handleDifficulty(5) }\n      disabled={ difficulty === 5 && 'disabled'}\n    >\n      5\n    </button>\n\n    <button\n      onClick={ () => handleDifficulty(6) }\n      disabled={ difficulty === 6 && 'disabled'}\n    >\n      6\n    </button>\n  </div>\n)\n","import { connect } from 'react-redux';\nimport Score from '../components/Score';\n\nconst mapState = ({ moves, bestScore, difficulty }) => ({ moves, bestScore, difficulty });\n\nexport default connect(mapState)(Score);\n","import React from 'react';\nimport ResetButton from '../containers/ResetButtonContainer';\nimport Difficulty from '../containers/DifficultyContainer';\n\nexport default ({ moves, bestScore, difficulty }) => {\n  const best = bestScore[difficulty];\n  return (\n    <aside>\n      <h1>Moves:</h1>\n      <div className='score'>{ moves < 10 ? `0${moves}` : moves }</div>\n      <h1>Best:</h1>\n      <div className='score'>{ best === Infinity ? '-' : best < 10 ? `0${best}` : best }</div>\n      <ResetButton />\n      <Difficulty />\n    </aside>\n  )\n}\n","import { connect } from 'react-redux';\nimport Pipe from '../components/Pipe';\n\nconst mapState = ({ colour, difficulty }) => ({ colour, difficulty });\n\nexport default connect(mapState)(Pipe);\n","import React from 'react';\n\nexport default ({ colour, difficulty }) => (\n  <React.Fragment>\n    <div className={`pipe pipe0 pipeColour${colour}`} />\n    <div className={`pipe pipe1 pipeColour${colour}`} />\n    <div className={`pipe pipe2 pipeColour${colour}`} />\n    <div\n      className={`pipe pipe3 pipeColour${colour}`}\n      style={{\n        width: `\n        calc(\n\n          (100% - 6rem)\n          / ${difficulty - 1}\n          * ${colour + 1}\n\n          - (100% - 6rem)\n          / ${difficulty - 1}\n\n          + 6.5rem\n\n        )`\n      }}\n    />\n    <div\n      className={`pipe pipe4 pipeColour${colour}`}\n      style={{\n        left: `\n        calc(\n\n          (100% - 6rem)\n          / ${difficulty - 1}\n          * ${colour + 1}\n\n          - (100% - 6rem)\n          / ${difficulty - 1}\n\n          + 2.5rem\n        )`\n      }}\n    />\n  </React.Fragment>\n)\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport initial from './data/initial';\nimport reducer from './data/reducer';\n\nimport Board from './containers/BoardContainer';\nimport Controls from './containers/ControlsContainer';\nimport Score from './containers/ScoreContainer';\nimport Pipe from './containers/PipeContainer';\n\nconst store = createStore(\n  reducer,\n  initial,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default () => (\n  <Provider store={ store }>\n    <main>\n      <Pipe />\n      <Board />\n      <Controls />\n    </main>\n    <Score />\n  </Provider>\n);\n","import undo             from './reducers/undo';\nimport resetBoard       from './reducers/resetBoard';\nimport changeColour     from './reducers/changeColour';\nimport updateDifficulty from './reducers/updateDifficulty';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case 'undo':              return undo(state);\n    case 'resetBoard':        return resetBoard(state);\n    case 'changeColour':      return changeColour(state, action);\n    case 'updateDifficulty':  return updateDifficulty(state, action);\n    default: return state;\n  }\n}\n","export default state => !state.history.length ? state : ({\n  ...state,\n  moves: state.moves - 1,\n  board: [...state.history].pop().board,\n  colour: [...state.history].pop().colour,\n  history: [...state.history].slice(0, state.history.length - 1)\n})\n","import calculateNewBoard from '../calculateNewBoard';\n\nexport default (state, action) => {\n\n  if (action.colour === state.colour) { return state }\n\n  const newBoard = calculateNewBoard(state.board, action.colour);\n\n  return ({\n    ...state,\n    colour: action.colour,\n    board: newBoard,\n    moves: state.moves + 1,\n\n    // add previous board to history for undo purposes\n    history: [\n      ...state.history,\n      {\n        board: [...state.board],\n        colour: state.colour,\n      }\n    ],\n\n    bestScore: {\n      ...state.bestScore,\n      // set the current difficulty level's best\n      // score if all squares have been changed.\n      [state.difficulty] :\n        newBoard.every(row => row.every(square => square === 'X')) &&\n        state.moves + 1 < state.bestScore[state.difficulty] ?\n        state.moves + 1 : state.bestScore[state.difficulty]\n    },\n  })\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}